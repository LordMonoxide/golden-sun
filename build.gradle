import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'java'
}

project.ext.hash = System.getenv("GITHUB_SHA");

if(project.ext.hash == null) {
  project.ext.hash = 'snapshot'
}

group = 'org.goldensun'
version project.ext.hash

sourceCompatibility = targetCompatibility = 1.17

project.ext.lwjglVersion = "3.3.3"
project.ext.jomlVersion = "1.10.6"

final def operatingSystem = hasProperty("os") ? org.gradle.internal.os.OperatingSystem.forName(os) : org.gradle.internal.os.OperatingSystem.current()
final def architecture = hasProperty("arch") ? arch : System.getProperty("os.arch")
final def isArm = architecture.startsWith("arm") || architecture.startsWith("aarch64")
final def isSteamDeck = hasProperty("steamdeck") && "true" == steamdeck;

switch(operatingSystem) {
  case org.gradle.internal.os.OperatingSystem.LINUX:
    project.ext.lwjglNatives = "natives-linux"
    break

  case org.gradle.internal.os.OperatingSystem.MAC_OS:
    project.ext.lwjglNatives = "natives-macos"
    break

  case org.gradle.internal.os.OperatingSystem.WINDOWS:
    project.ext.lwjglNatives = "natives-windows"
    break
}

if(isArm) {
  project.ext.lwjglNatives += "-arm64"
}

println "Building for " + operatingSystem.familyName + " " + architecture

repositories {
  mavenCentral()
}

dependencies {
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
  implementation group: 'org.fusesource.jansi', name: 'jansi', version: '2.3.2'
  implementation group: 'com.lmax', name: 'disruptor', version: '3.4.4'

  implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

  implementation "org.lwjgl:lwjgl"
  implementation "org.lwjgl:lwjgl-glfw"
  implementation "org.lwjgl:lwjgl-opengl"
  implementation "org.lwjgl:lwjgl-stb"
  runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
  runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
  implementation "org.joml:joml:${jomlVersion}"

  implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.12'

  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

  implementation group: 'net.java.dev.jna', name: 'jna', version: '5.13.0'
}

jar {
  manifest {
    attributes(
      'Main-Class': 'org.goldensun.Main'
    )
  }
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = "sources"
}

task clearOutput(type: Delete) {
  delete layout.buildDirectory.dir("libs/libs")
  delete layout.buildDirectory.file("libs/**")
}

task copyLibs(type: Copy) {
  from configurations.compileClasspath + configurations.runtimeClasspath
  into layout.buildDirectory.dir("libs/libs")
}

task copySupportFiles(type: Copy) {
  into layout.buildDirectory.dir("libs")

  into("gfx") {
    from 'gfx'
  }

  into(".") {
    switch(operatingSystem) {
      case org.gradle.internal.os.OperatingSystem.LINUX:
        from(isSteamDeck ? 'launch-steamdeck' : 'launch-linux') {
          filter(ReplaceTokens, tokens: [version: project.ext.hash])
          rename("-\\w+", "")
        }
        from('download-java') {
          filter(ReplaceTokens, tokens: [os: 'linux', arch: isArm ? "aarch64" : "x64"])
        }
        break

      case org.gradle.internal.os.OperatingSystem.MAC_OS:
        from('launch-macos') {
          filter(ReplaceTokens, tokens: [version: project.ext.hash])
          rename("-macos", "")
        }
        from('download-java') {
          filter(ReplaceTokens, tokens: [os: 'macosx', arch: isArm ? "aarch64" : "x64"])
        }
        break

      case org.gradle.internal.os.OperatingSystem.WINDOWS:
        from('launch.bat') {
          filter(ReplaceTokens, tokens: [version: project.ext.hash])
        }
        break
    }

    from 'log4j2.xml'
    from 'LICENSE'
  }
}

jar.dependsOn(clearOutput, copyLibs, copySupportFiles)

test {
  useJUnitPlatform()
}

sourceSets {
  main {
    java {
      srcDirs = ["src/main/java"]
      exclude ".gradle", "build", "files"
    }
  }
}
